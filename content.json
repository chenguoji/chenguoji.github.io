{"meta":{"title":"人生如戏，全靠颜值","subtitle":"人生如戏，全靠颜值","description":null,"author":"chen guoji","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"JS面试之数组","slug":"JS面试之数组","date":"2019-03-23T02:39:50.000Z","updated":"2019-03-23T02:32:35.089Z","comments":true,"path":"2019/03/23/JS面试之数组/","link":"","permalink":"http://yoursite.com/2019/03/23/JS面试之数组/","excerpt":"","text":"前言本文主要从应用来讲JS数组api的一些骚操作，如一行代码扁平化n维数组、数组去重、求数组最大值、数组求和、排序、对象和数组的转化等。 上面这些应用场景你可以用一行代码实现吗？ 1.扁平化n维数组1.终极篇12345 [1,[2,3]].flat(2) //[1,2,3][1,[2,3,[4,5]].flat(3) //[1,2,3,4,5][1,[2,3,[4,5[...]].flat(Infinity) //[1,2,3,4...n] Array.flat(n)是ES10扁平数组的api， n表示维度， n值为 Infinity时维度为无限大 2.开始篇 实质是利用递归和数组合并方法 concat实现扁平。 来源：作者：火狼https://segmentfault.com/a/1190000018549643","categories":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/技术/"}],"tags":[{"name":"JS","slug":"JS","permalink":"http://yoursite.com/tags/JS/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/技术/"}]},{"title":"Java面试中最高频的那20%知识点！","slug":"Java面试","date":"2019-03-21T02:39:50.000Z","updated":"2019-03-23T02:34:45.258Z","comments":true,"path":"2019/03/21/Java面试/","link":"","permalink":"http://yoursite.com/2019/03/21/Java面试/","excerpt":"","text":"Java目前已经不仅仅是一门开发语言，而是一整套生态体系。 作为一个Java程序员，既是幸运的，也是不幸的。幸运的是我们有很多轮子可以拿过来用，不幸的是我们有太多的轮子需要学习。 但是，无论是日常工作还是面试问题，也都符合二八原则。即掌握20%的知识，就能解决80%的问题。 那么，Java程序员必须掌握的20%知识点都有哪些呢？ 个人认为包括以下内容： Java基础知识，如集合类、IO、泛型等。 JVM底层知识，如类加载机制、GC、JVM内存结构等。 Java并发编程知识，如Java内存模型、并发包、线程池、netty等。 开发框架知识，如Spring、mybatis、springboot、springMVC等。 分布式相关知识，如CAP理论、分布式锁、分布式事务、Zookeeper、spring Cloud等。 其他基础知识，编程语言、网络方面、数据库、数据结构和算法。 中间件相关知识，如Redis、rabbitMQ、Dubbo等。 服务器相关知识，如tomcat、jetty、jboss等。 以上这些知识，就是最高频的面试问题，以及工作中需要用到的知识。当然，一个程序员想要掌握以上所有知识，可能需要花费很长时间。这个过程注定是漫长且孤独的。 来源：https://mp.weixin.qq.com/s/Ws79USt9mkkANGrVwdpkpw","categories":[{"name":"面试","slug":"面试","permalink":"http://yoursite.com/categories/面试/"}],"tags":[{"name":"java","slug":"java","permalink":"http://yoursite.com/tags/java/"}],"keywords":[{"name":"面试","slug":"面试","permalink":"http://yoursite.com/categories/面试/"}]},{"title":"关于","slug":"about","date":"2019-03-21T02:39:50.000Z","updated":"2019-03-22T02:18:37.994Z","comments":true,"path":"2019/03/21/about/","link":"","permalink":"http://yoursite.com/2019/03/21/about/","excerpt":"","text":"关于博主博主是一名Java码农。 虽然还未走上人生巅峰，但是一直保持着一个码农的自我修养。 用一句话概括博主：每天瞎逼忙，还没赚到钱。 但是博主有一颗分享技术的心，我会尽量用通俗易懂的方式，分享个人的知识。 博客的宗旨就是分享知识，分享技术，不一定高深，但一定是博主用心写作而成的。 所有人都是从0开始起步，在学习过程中，会遇到各种困难，这个时候如果可以借鉴别人的经验，会让我们省力不少，希望我的博客也能帮助到你。","categories":[{"name":"关于","slug":"关于","permalink":"http://yoursite.com/categories/关于/"}],"tags":[{"name":"博客说明","slug":"博客说明","permalink":"http://yoursite.com/tags/博客说明/"}],"keywords":[{"name":"关于","slug":"关于","permalink":"http://yoursite.com/categories/关于/"}]},{"title":"Java转型大数据开发技能","slug":"Java转型大数据开发技能","date":"2019-03-21T02:39:50.000Z","updated":"2019-03-23T02:34:05.741Z","comments":true,"path":"2019/03/21/Java转型大数据开发技能/","link":"","permalink":"http://yoursite.com/2019/03/21/Java转型大数据开发技能/","excerpt":"","text":"很多做程序猿都知道，对于技术方面，擅长大家一直提倡的是精一门，再横向发展，多学一点总不是坏事。 什么意思呢？ 就是我们当前工作用到的那一门技术一定要学好、学精、学深，然后可以拓展其他相关的技术栈。 如此多的技术，怎么学得过来呢？ 我觉得以你自己的岗位为主，其他为辅，关于自己工作相关的技术，花更多的时间和精力，研究得更深入，其他领域的可以了解和关注，等到需要用到或者感兴趣的时候，在深入学习即可。 那作为 Java 开发，除了 Java 还可以学什么？ 大数据可能是一个不错的方向。 一、转型大数据需要哪些技能？ 技术层面来说，如果你初步掌握Java编程，转型大数据都是非常轻松的具有天然的优势。 Java编程是大数据开发的基础，Java编程是必备技能； 大数据使用的Hadoop(在分布式服务器集群上存储海量数据并运行分布式分析应用的一种方法)需要Java基础， 所以有很多搞Java的都在往这hadoop大数据方向转。","categories":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/技术/"}],"tags":[{"name":"java、大数据","slug":"java、大数据","permalink":"http://yoursite.com/tags/java、大数据/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/技术/"}]},{"title":"MyBatis动态SQL","slug":"MyBatis动态SQL","date":"2019-03-21T02:39:50.000Z","updated":"2019-03-23T02:33:02.067Z","comments":true,"path":"2019/03/21/MyBatis动态SQL/","link":"","permalink":"http://yoursite.com/2019/03/21/MyBatis动态SQL/","excerpt":"MyBatis 令人喜欢的一大特性就是动态 SQL。 在使用 JDBC 的过程中， 根据条件进行 SQL 的拼接是很麻烦且很容易出错的。 MyBatis 动态 SQL 的出现， 解决了这个麻烦。 MyBatis通过 OGNL 来进行动态 SQL 的使用的。目前， 动态 SQL 支持以下几种标签：","text":"MyBatis 令人喜欢的一大特性就是动态 SQL。 在使用 JDBC 的过程中， 根据条件进行 SQL 的拼接是很麻烦且很容易出错的。 MyBatis 动态 SQL 的出现， 解决了这个麻烦。 MyBatis通过 OGNL 来进行动态 SQL 的使用的。目前， 动态 SQL 支持以下几种标签： 一、 数据准备为了后面的演示， 创建了一个 Maven 项目 mybatis-dynamic, 创建了对应的数据库和表 12345678910111213141516DROP TABLE IF EXISTS `student`;CREATE TABLE `student` ( `student_id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT &apos;编号&apos;, `name` varchar(20) DEFAULT NULL COMMENT &apos;姓名&apos;, `phone` varchar(20) DEFAULT NULL COMMENT &apos;电话&apos;, `email` varchar(50) DEFAULT NULL COMMENT &apos;邮箱&apos;, `sex` tinyint(4) DEFAULT NULL COMMENT &apos;性别&apos;, `locked` tinyint(4) DEFAULT NULL COMMENT &apos;状态(0:正常,1:锁定)&apos;, `gmt_created` datetime DEFAULT CURRENT_TIMESTAMP COMMENT &apos;存入数据库的时间&apos;, `gmt_modified` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &apos;修改的时间&apos;, `delete` int(11) DEFAULT NULL, PRIMARY KEY (`student_id`)) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT=&apos;学生表&apos;; 二、 if 标签if 标签是我们最常使用的。 在查询、删除、更新的时候很可能会使用到。 必须结合 test 属性联合使用。 2.1 在 WHERE 条件中使用 if 标签这是常见的一种现象， 我们在进行按条件查询的时候， 可能会有多种情况。 2.1.1 查询条件根据输入的学生信息进行条件检索 当只输入用户名时， 使用用户名进行模糊检索；当只输入性别时， 使用性别进行完全匹配当用户名和性别都存在时， 用这两个条件进行查询匹配查询 2.1.2 动态 SQL接口函数1234567891011121314151617181920212223242526 /** * 根据输入的学生信息进行条件检索 * 1. 当只输入用户名时， 使用用户名进行模糊检索； * 2. 当只输入邮箱时， 使用性别进行完全匹配 * 3. 当用户名和性别都存在时， 用这两个条件进行查询匹配的用 * @param student * @return */List&lt;Student&gt; selectByStudentSelective(Student student);对应的动态 SQL &lt;select id=&quot;selectByStudentSelective&quot; resultMap=&quot;BaseResultMap&quot; parameterType=&quot;com.homejim.mybatis.entity.Student&quot;&gt; select &lt;include refid=&quot;Base_Column_List&quot; /&gt; from student where 1=1 &lt;if test=&quot;name != null and name !=&apos;&apos;&quot;&gt; and name like concat(&apos;%&apos;, #&#123;name&#125;, &apos;%&apos;) &lt;/if&gt; &lt;if test=&quot;sex != null&quot;&gt; and sex=#&#123;sex&#125; &lt;/if&gt; &lt;/select&gt; 在此 SQL 语句中， where 1=1 是多条件拼接时的小技巧， 后面的条件查询就可以都用 and 了。 同时， 我们添加了 if 标签来处理动态 SQL123456&lt;if test=&quot;name != null and name !=&apos;&apos;&quot;&gt; and name like concat(&apos;%&apos;, #&#123;name&#125;, &apos;%&apos;)&lt;/if&gt;&lt;if test=&quot;sex != null&quot;&gt; and sex=#&#123;sex&#125;&lt;/if&gt; 此 if 标签的 test 属性值是一个符合 OGNL 的表达式， 表达式可以是 true 或 false。 如果表达式返回的是数值， 则0为 false, 非 0 为 true; 2.1.3 测试1234567891011121314151617181920212223242526272829303132@Test public void selectByStudent() &#123; SqlSession sqlSession = null; sqlSession = sqlSessionFactory.openSession(); StudentMapper studentMapper = sqlSession.getMapper(StudentMapper.class); Student search = new Student(); search.setName(&quot;明&quot;); System.out.println(&quot;只有名字时的查询&quot;); List&lt;Student&gt; studentsByName = studentMapper.selectByStudentSelective(search); for (int i = 0; i &lt; studentsByName.size(); i++) &#123; System.out.println(ToStringBuilder.reflectionToString(studentsByName.get(i), ToStringStyle.MULTI_LINE_STYLE)); &#125; search.setName(null); search.setSex((byte) 1); System.out.println(&quot;只有性别时的查询&quot;); List&lt;Student&gt; studentsBySex = studentMapper.selectByStudentSelective(search); for (int i = 0; i &lt; studentsBySex.size(); i++) &#123; System.out.println(ToStringBuilder.reflectionToString(studentsBySex.get(i), ToStringStyle.MULTI_LINE_STYLE)); &#125; System.out.println(&quot;姓名和性别同时存在的查询&quot;); search.setName(&quot;明&quot;); List&lt;Student&gt; studentsByNameAndSex = studentMapper.selectByStudentSelective(search); for (int i = 0; i &lt; studentsByNameAndSex.size(); i++) &#123; System.out.println(ToStringBuilder.reflectionToString(studentsByNameAndSex.get(i), ToStringStyle.MULTI_LINE_STYLE)); &#125; sqlSession.commit(); sqlSession.close(); 只有名字时的查询， 发送的语句和结果 查询的条件只发送了 where 1=1 and name like concat(‘%’, ?, ‘%’) 只有性别时的查询， 发送的语句和结果 查询的条件只发送了 where 1=1 and sex=? 姓名和性别同时存在的查询， 发送的语句和结果 查询条件 where 1=1 and name like concat(‘%’, ?, ‘%’) and sex=? 2.2 在 UPDATE 更新列中使用 if 标签有时候我们不希望更新所有的字段， 只更新有变化的字段。 2.2.1 更新条件只更新有变化的字段， 空值不更新。 2.2.1 动态 SQL接口方法12345678910111213141516171819202122232425262728293031323334 /** * 更新非空属性 */ int updateByPrimaryKeySelective(Student record); 对应的 SQL &lt;update id=&quot;updateByPrimaryKeySelective&quot; parameterType=&quot;com.homejim.mybatis.entity.Student&quot;&gt; update student &lt;set&gt; &lt;if test=&quot;name != null&quot;&gt; `name` = #&#123;name,jdbcType=VARCHAR&#125;, &lt;/if&gt; &lt;if test=&quot;phone != null&quot;&gt; phone = #&#123;phone,jdbcType=VARCHAR&#125;, &lt;/if&gt; &lt;if test=&quot;email != null&quot;&gt; email = #&#123;email,jdbcType=VARCHAR&#125;, &lt;/if&gt; &lt;if test=&quot;sex != null&quot;&gt; sex = #&#123;sex,jdbcType=TINYINT&#125;, &lt;/if&gt; &lt;if test=&quot;locked != null&quot;&gt; locked = #&#123;locked,jdbcType=TINYINT&#125;, &lt;/if&gt; &lt;if test=&quot;gmtCreated != null&quot;&gt; gmt_created = #&#123;gmtCreated,jdbcType=TIMESTAMP&#125;, &lt;/if&gt; &lt;if test=&quot;gmtModified != null&quot;&gt; gmt_modified = #&#123;gmtModified,jdbcType=TIMESTAMP&#125;, &lt;/if&gt; &lt;/set&gt; where student_id = #&#123;studentId,jdbcType=INTEGER&#125; 2.2.3 测试123456789101112131415@Testpublic void updateByStudentSelective() &#123; SqlSession sqlSession = null; sqlSession = sqlSessionFactory.openSession(); StudentMapper studentMapper = sqlSession.getMapper(StudentMapper.class); Student student = new Student(); student.setStudentId(1); student.setName(&quot;明明&quot;); student.setPhone(&quot;13838438888&quot;); System.out.println(studentMapper.updateByPrimaryKeySelective(student)); sqlSession.commit(); sqlSession.close(); 2.3 在 INSERT 动态插入中使用 if 标签我们插入数据库中的一条记录， 不是每一个字段都有值的， 而是动态变化的。 在这时候使用 if 标签， 可帮我们解决这个问题。 2.3.1 插入条件只有非空属性才插入。 2.3.2 动态SQL接口方法12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364 /** * 非空字段才进行插入 */ int insertSelective(Student record); 对应的SQL&lt;insert id=&quot;insertSelective&quot; parameterType=&quot;com.homejim.mybatis.entity.Student&quot;&gt; insert into student &lt;trim prefix=&quot;(&quot; suffix=&quot;)&quot; suffixOverrides=&quot;,&quot;&gt; &lt;if test=&quot;studentId != null&quot;&gt; student_id, &lt;/if&gt; &lt;if test=&quot;name != null&quot;&gt; `name`, &lt;/if&gt; &lt;if test=&quot;phone != null&quot;&gt; phone, &lt;/if&gt; &lt;if test=&quot;email != null&quot;&gt; email, &lt;/if&gt; &lt;if test=&quot;sex != null&quot;&gt; sex, &lt;/if&gt; &lt;if test=&quot;locked != null&quot;&gt; locked, &lt;/if&gt; &lt;if test=&quot;gmtCreated != null&quot;&gt; gmt_created, &lt;/if&gt; &lt;if test=&quot;gmtModified != null&quot;&gt; gmt_modified, &lt;/if&gt; &lt;/trim&gt; &lt;trim prefix=&quot;values (&quot; suffix=&quot;)&quot; suffixOverrides=&quot;,&quot;&gt; &lt;if test=&quot;studentId != null&quot;&gt; #&#123;studentId,jdbcType=INTEGER&#125;, &lt;/if&gt; &lt;if test=&quot;name != null&quot;&gt; #&#123;name,jdbcType=VARCHAR&#125;, &lt;/if&gt; &lt;if test=&quot;phone != null&quot;&gt; #&#123;phone,jdbcType=VARCHAR&#125;, &lt;/if&gt; &lt;if test=&quot;email != null&quot;&gt; #&#123;email,jdbcType=VARCHAR&#125;, &lt;/if&gt; &lt;if test=&quot;sex != null&quot;&gt; #&#123;sex,jdbcType=TINYINT&#125;, &lt;/if&gt; &lt;if test=&quot;locked != null&quot;&gt; #&#123;locked,jdbcType=TINYINT&#125;, &lt;/if&gt; &lt;if test=&quot;gmtCreated != null&quot;&gt; #&#123;gmtCreated,jdbcType=TIMESTAMP&#125;, &lt;/if&gt; &lt;if test=&quot;gmtModified != null&quot;&gt; #&#123;gmtModified,jdbcType=TIMESTAMP&#125;, &lt;/if&gt; &lt;/trim&gt; &lt;/insert&gt; 这个 SQL 大家应该很熟悉， 毕竟是自动生成的。 2.3.3 测试12345678910111213141516171819@Testpublic void insertByStudentSelective() &#123; SqlSession sqlSession = null; sqlSession = sqlSessionFactory.openSession(); StudentMapper studentMapper = sqlSession.getMapper(StudentMapper.class); Student student = new Student(); student.setName(&quot;小飞机&quot;); student.setPhone(&quot;13838438899&quot;); student.setEmail(&quot;xiaofeiji@qq.com&quot;); student.setLocked((byte) 0); System.out.println(studentMapper.insertSelective(student)); sqlSession.commit(); sqlSession.close();&#125; SQL 中， 只有非空的字段才进行了插入。 三、代码使用示例：https://github.com/homejim/mybatis-examples 来源:作者：阿进的写字台cnblogs.com/homejim/p/9909657.html","categories":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/技术/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/tags/数据库/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/技术/"}]}]}